(ns hello.core
  (:require [hello.foo.bar :as bar]))

(defn selector-trampoline
  [f]
  (reify
    NS/Object
    (execute:! [self sender]
      (f sender))))

(defn- timer-instance
  []
  (reify
    NS/Object
      (triggered:! [self timer]
        (let [f (:fn (.userInfo timer))]
          (f)))))

(defn schedule-timer
  [t f]
  (let [inst (timer-instance)]
    (.scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:! NS/Timer (->d t) inst (selector "triggered:") {:fn f :inst inst} (->b true))))

(defn set-string!
  [field s]
  (.setStringValue:! field s)
  s)

(defn assoc-obj!
  [obj key val]
  (objc* "objc_setAssociatedObject(~{}, (__bridge const void *)~{}, ~{}, OBJC_ASSOCIATION_RETAIN)" obj key val)
  obj)

(defn get-assoc
  [obj key]
  (objc* "objc_getAssociatedObject(~{}, (__bridge const void *)~{})" obj key))

(def selector-trampoline-fn-key "fn")

(defn set-button-fn!
  [button f]
  (let [t (selector-trampoline f)]
    (assoc-obj! button selector-trampoline-fn-key t)
    (doto button
      (.setTarget:! t)
      (.setAction:! (selector "execute:")))))

(ns hello.core
  (:require [hello.foo.bar :as bar]))

(defn- timer-instance
  []
  (reify
    NS/Object
      (triggered:! [self timer]
        (let [f (:fn (.userInfo timer))]
          (f)))))

(defn- schedule-timer
  [t f]
  (let [inst (timer-instance)]
    (.scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:! NS/Timer (->d t) inst (selector "triggered:") {:fn f :inst inst} (->b true))))

(def ^:dynamic *count* 0)

(defn set-string!
  [field s]
  (.setStringValue:! field s)
  s)

(defn update-field!
  [field val]
  (set-string! field (str (set! *count* val))))

(deftype DAP/TestAppDel [^iboutlet blah-field ^iboutlet button]
  NS/Object

  NS/ApplicationDelegate
  (applicationDidFinishLaunching:! [self note]
    (schedule-timer 1 (fn []
                        (update-field! blah-field (inc *count*))))
    (doto button
      (.setTarget:! self)
      (.setAction:! (selector "clear:"))))

  (clear:! [self sender]
    (update-field! blah-field 0)))

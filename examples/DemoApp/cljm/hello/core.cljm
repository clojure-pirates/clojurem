(ns hello.core
  (:require [hello.foo.bar :as bar]))

(defn selector-trampoline
  [f]
  (reify
    NS/Object
    (execute:! [self sender]
      (f sender))))

(defn schedule-timer
  [t f]
  (let [inst (selector-trampoline f)]
    (.scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:! NS/Timer (->d t) inst (selector "execute:") {:inst inst} (->b true))))

(defn set-string!
  [field s]
  (.setStringValue:! field s)
  s)

(defn assoc-obj!
  [obj key val]
  (objc* "objc_setAssociatedObject(~{}, (__bridge const void *)~{}, ~{}, OBJC_ASSOCIATION_RETAIN)" obj key val)
  obj)

(defn get-assoc
  [obj key]
  (objc* "objc_getAssociatedObject(~{}, (__bridge const void *)~{})" obj key))

(defn async
  [f]
  (objc* "dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{ ~{}; })" (f))
  nil)

(def selector-trampoline-fn-key "fn")

(defn set-button-fn!
  [button f]
  (let [t (selector-trampoline f)]
    (assoc-obj! button selector-trampoline-fn-key t)
    (doto button
      (.setTarget:! t)
      (.setAction:! (selector "execute:")))))

(defn log
  [& args]
  (c/NSLog "%@" (str args))
  nil)
